*processing.nvim.txt*      For NVIM v0.10.0     Last change: 2024 September 16

==============================================================================
Table of Contents                          *processing.nvim-table-of-contents*

1. processing.nvim                           |processing.nvim-processing.nvim|
  - Features                        |processing.nvim-processing.nvim-features|
  - Requirements                |processing.nvim-processing.nvim-requirements|
  - Installation                |processing.nvim-processing.nvim-installation|
  - Configuration              |processing.nvim-processing.nvim-configuration|
  - Recipes                          |processing.nvim-processing.nvim-recipes|
  - Related projects        |processing.nvim-processing.nvim-related-projects|

==============================================================================
1. processing.nvim                           *processing.nvim-processing.nvim*

A simple plugin that provides Processing <https://processing.org/> support for
Neovim <https://neovim.io/>.


FEATURES                            *processing.nvim-processing.nvim-features*

1. Processing ctags generates an index file of symbols in your source code,
enabling quick navigation to definitions and declarations directly within your
editor.


2. The `:make` command in Neovim is configured to execute your Processing sketch
directly using processing-java –sketch=/path/to/your/sketch –run


3. The `:Processing lsp` command starts the Processing Language Server (LSP),
which must be manually set up. if `vim.g.processing_nvim.lsp.cmd` is nil, the
LSP will not start.


4. The commentstring is set to `// %s` to format comments in a way that matches
the style used in Java, where `//` is used for single-line comments.




REQUIREMENTS                    *processing.nvim-processing.nvim-requirements*

- Neovim >= 0.10.0 (may work on previous versions).
- processing-java
- Optional:
    - ctags <https://github.com/universal-ctags/ctags> (for `:Processing ctags`).
    - a Processing Language Server (for lsp setup and `:Processing lsp`).
    - nvim-treesitter <https://github.com/nvim-treesitter/nvim-treesitter> with
        the tree-sitter-java <https://github.com/tree-sitter/tree-sitter-java>
        parser for syntax highlighting.


  [!warning] macOS users will need to install the processing-java command from
  the IDE. The `:make` command will not function without doing this. Location:
  Menu Bar > Tools > Install "processing-java"

INSTALLATION                    *processing.nvim-processing.nvim-installation*

Install processing.nvim with a package manager of your choice.


ROCKS.NVIM ~

>vim
    :Rocks install processing.nvim
<


LAZY.NVIM ~

>lua
    {
    'sophieforrest/processing.nvim'
    -- This plugin is already lazy-loaded.
    lazy = false,
    -- Recommended.
    version = "^1",
    }
<


PACKER.NVIM ~

>lua
    use 'sophieforrest/processing.nvim'
<


PAQ-NVIM ~

>lua
    'sophieforrest/processing.nvim'
<


VIM-PLUG ~

>vim
    Plug 'sophieforrest/processing.nvim'
<


CONFIGURATION                  *processing.nvim-processing.nvim-configuration*


  [!important] If the plugin isn’t working correctly, run `:checkhealth
  processing` to identify possible issues.
processing.nvim uses the `vim.g.processing_nvim` namespace for configuration.
The default configuration can be found below.

>lua
    vim.g.processing_nvim = {
      ---@type processing.Config
      Default.default = {
        highlight = {
          -- Whether to enable treesitter highlighting.
            ---@type boolean
            enable = true,
        },
        lsp = {
          -- The command to use for processing-lsp. This needs to be created
          -- manually as processing doesn't bundle their LSP as a separate package.
          -- This generally involves editing the processing wrapper script.
          -- This will not start the LSP if set to nil.
          ---@type string[]|nil|fun(dispatchers: vim.lsp.rpc.Dispatchers): vim.lsp.rpc.PublicClient
          cmd = nil,
          -- Example: cmd = { "processing-lsp" }
        },
      },
    }
<


RECIPES                              *processing.nvim-processing.nvim-recipes*

Code examples that users of processing.nvim may find useful to include in their
configs. These can be included anywhere in your configuration.


GENERATING CTAGS ON SAVE ~

>lua
    local processing_ctags = vim.api.nvim_create_augroup('ProcessingCtags', {})
    vim.api.nvim_create_autocmd({ 'BufWritePost' }, {
      command = 'Processing ctags',
      desc = 'Generate ctags for Processing on save.',
      group = processing_ctags,
      pattern = { '*.pde' },
    })
<


SHOW ERRORS WHEN CALLING :MAKE ~

>lua
    vim.api.nvim_create_autocmd('QuickFixCmdPost', {
      pattern = '*',
      callback = function()
        if #vim.fn.getqflist() > 0 then
          vim.cmd('copen')
        end
      end,
    })
<


RELATED PROJECTS            *processing.nvim-processing.nvim-related-projects*

- sophacles/vim-processing <https://github.com/sophacles/vim-processing>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
